import type { Edge } from "../types";

/**
 * –ï–¥–∏–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ edges
 */

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ edge (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
const EDGE_TYPE_COLORS: Record<Edge["type"], string> = {
  star: "#f59e0b", // –ñ–µ–ª—Ç—ã–π - –∑–≤–µ–∑–¥–∞
  supernova: "#ef4444", // –ö—Ä–∞—Å–Ω—ã–π - —Å–≤–µ—Ä—Ö–Ω–æ–≤–∞—è
  neutron_star: "#8b5cf6", // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - –Ω–µ–π—Ç—Ä–æ–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞
  black_hole: "#1f2937", // –¢–µ–º–Ω—ã–π - —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ edge
const EDGE_TYPE_ICONS: Record<Edge["type"], string> = {
  star: "‚≠ê",
  supernova: "üí•",
  neutron_star: "‚ö°",
  black_hole: "üï≥Ô∏è",
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ edge
const EDGE_TYPE_NAMES: Record<Edge["type"], string> = {
  star: "–ó–≤–µ–∑–¥–∞",
  supernova: "–°–≤–µ—Ä—Ö–Ω–æ–≤–∞—è",
  neutron_star: "–ù–µ–π—Ç—Ä–æ–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞",
  black_hole: "–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞",
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–æ–≤)
const ADDITIONAL_COLORS = [
  "#3b82f6", // –°–∏–Ω–∏–π
  "#10b981", // –ó–µ–ª–µ–Ω—ã–π
  "#ec4899", // –†–æ–∑–æ–≤—ã–π
  "#14b8a6", // –ë–∏—Ä—é–∑–æ–≤—ã–π
  "#f97316", // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  "#22c55e", // –õ–∞–π–º
  "#eab308", // –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
];

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ edge
 */
export const getEdgeTypeIcon = (type: Edge["type"]): string => {
  return EDGE_TYPE_ICONS[type] || "üåü";
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ edge
 */
export const getEdgeTypeName = (type: Edge["type"]): string => {
  return EDGE_TYPE_NAMES[type] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ edge
 */
export const getEdgeTypeColor = (type: Edge["type"]): string => {
  return EDGE_TYPE_COLORS[type] || "#8884d8";
};

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø edge –ø–æ ID (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ edge)
 */
export const getEdgeTypeById = (edgeId: string): Edge["type"] => {
  const types: Edge["type"][] = [
    "star",
    "supernova",
    "neutron_star",
    "black_hole",
  ];

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à –∏–∑ ID –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
  let hash = 0;
  for (let i = 0; i < edgeId.length; i++) {
    const char = edgeId.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
  }

  return types[Math.abs(hash) % 4];
};


/**
 * –°–æ–∑–¥–∞—Ç—å edge –æ–±—ä–µ–∫—Ç –∏–∑ ID
 */
export const createEdgeFromId = (edgeId: string): Edge => {
  return {
    id: edgeId,
    name: `–û–±—ä–µ–∫—Ç ${edgeId}`,
    type: getEdgeTypeById(edgeId),
  };
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–¥–ª—è —Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
 */
export const getColorByIndex = (index: number): string => {
  // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ —Ç–∏–ø–æ–≤ edges, –ø–æ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
  const allColors = [...Object.values(EDGE_TYPE_COLORS), ...ADDITIONAL_COLORS];
  return allColors[index % allColors.length];
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è edge –ø–æ –µ–≥–æ ID (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ edge)
 */
export const getEdgeColorById = (edgeId: string): string => {
  // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ ID
  let hash = 0;
  for (let i = 0; i < edgeId.length; i++) {
    const char = edgeId.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
  }
  return getColorByIndex(Math.abs(hash));
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã edges
 */
export const getAllEdgeTypes = (): Edge["type"][] => {
  return Object.keys(EDGE_TYPE_ICONS) as Edge["type"][];
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± edge —Ç–∏–ø–µ
 */
export const getEdgeTypeInfo = (type: Edge["type"]) => {
  return {
    type,
    icon: getEdgeTypeIcon(type),
    name: getEdgeTypeName(type),
    color: getEdgeTypeColor(type),
  };
};

/**
 * –°–æ–∑–¥–∞—Ç—å colorMap –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
 */
export const createColorMapForTags = (
  tagIds: string[]
): Record<string, string> => {
  const colorMap: Record<string, string> = {};
  tagIds.forEach((tagId, index) => {
    colorMap[tagId] = getColorByIndex(index);
  });
  return colorMap;
};
