import { WidgetType } from "../types/widgets";
import type { WidgetConfig, TagWidgetAssignment } from "../types/widgets";
import type { Tag } from "../types";

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
 */
const WIDGET_CONFIGS: Record<WidgetType, WidgetConfig> = {
  // Boolean –≤–∏–¥–∂–µ—Ç—ã
  [WidgetType.LED_INDICATOR]: {
    type: WidgetType.LED_INDICATOR,
    name: "LED –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä",
    description: "–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ",
    dataTypes: ["boolean"],
    icon: "üí°",
    color: "#22c55e",
  },
  [WidgetType.SWITCH_TOGGLE]: {
    type: WidgetType.SWITCH_TOGGLE,
    name: "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
    description: "–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª/–≤—ã–∫–ª",
    dataTypes: ["boolean"],
    icon: "üîò",
    color: "#3b82f6",
  },
  [WidgetType.STATUS_LIGHT]: {
    type: WidgetType.STATUS_LIGHT,
    name: "–°—Ç–∞—Ç—É—Å–Ω–∞—è –ª–∞–º–ø–∞",
    description: "–¶–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è",
    dataTypes: ["boolean"],
    icon: "üö¶",
    color: "#f59e0b",
  },
  [WidgetType.ALARM_PANEL]: {
    type: WidgetType.ALARM_PANEL,
    name: "–ü–∞–Ω–µ–ª—å –∞–≤–∞—Ä–∏–π",
    description: "–ü–∞–Ω–µ–ª—å —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –º–∏–≥–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º",
    dataTypes: ["boolean"],
    icon: "üö®",
    color: "#ef4444",
  },

  // Number –≤–∏–¥–∂–µ—Ç—ã
  [WidgetType.THERMOMETER]: {
    type: WidgetType.THERMOMETER,
    name: "–¢–µ—Ä–º–æ–º–µ—Ç—Ä",
    description: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–æ–º–µ—Ç—Ä —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
    dataTypes: ["number"],
    icon: "üå°Ô∏è",
    color: "#ec4899",
  },
  [WidgetType.GAUGE]: {
    type: WidgetType.GAUGE,
    name: "–°—Ç—Ä–µ–ª–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä",
    description: "–ö—Ä—É–≥–æ–≤–æ–π –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π",
    dataTypes: ["number"],
    icon: "‚ö°",
    color: "#8b5cf6",
  },
  [WidgetType.SPEEDOMETER]: {
    type: WidgetType.SPEEDOMETER,
    name: "–°–ø–∏–¥–æ–º–µ—Ç—Ä",
    description: "–ü–æ–ª—É–∫—Ä—É–≥–æ–≤–æ–π —Å–ø–∏–¥–æ–º–µ—Ç—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏",
    dataTypes: ["number"],
    icon: "üìä",
    color: "#14b8a6",
  },
  [WidgetType.LIQUID_FILL]: {
    type: WidgetType.LIQUID_FILL,
    name: "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∂–∏–¥–∫–æ—Å—Ç—å—é",
    description: "–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–º–∫–æ—Å—Ç–∏",
    dataTypes: ["number"],
    icon: "üåä",
    color: "#06b6d4",
  },
  [WidgetType.BAR_CHART]: {
    type: WidgetType.BAR_CHART,
    name: "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
    description: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π",
    dataTypes: ["number"],
    icon: "üìä",
    color: "#10b981",
  },
  [WidgetType.AREA_CHART]: {
    type: WidgetType.AREA_CHART,
    name: "–ü–ª–æ—â–∞–¥–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
    description: "–ì—Ä–∞—Ñ–∏–∫ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é",
    dataTypes: ["number"],
    icon: "üìà",
    color: "#f97316",
  },

  // DINT –≤–∏–¥–∂–µ—Ç—ã (–±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞)
  [WidgetType.DIGITAL_DISPLAY]: {
    type: WidgetType.DIGITAL_DISPLAY,
    name: "–¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–∞–±–ª–æ",
    description: "–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–∏—Å–ø–ª–µ–π —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏",
    dataTypes: ["number"],
    icon: "üî¢",
    color: "#eab308",
  },
  [WidgetType.COUNTER]: {
    type: WidgetType.COUNTER,
    name: "–°—á–µ—Ç—á–∏–∫",
    description: "–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
    dataTypes: ["number"],
    icon: "üî¢",
    color: "#a855f7",
  },
  [WidgetType.HISTOGRAM]: {
    type: WidgetType.HISTOGRAM,
    name: "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞",
    description: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –≤–∏–¥–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã",
    dataTypes: ["number"],
    icon: "üìä",
    color: "#84cc16",
  },
  [WidgetType.RADAR_CHART]: {
    type: WidgetType.RADAR_CHART,
    name: "–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
    description: "–ú–Ω–æ–≥–æ–º–µ—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Ä–∞–¥–∞—Ä–∞",
    dataTypes: ["number"],
    icon: "üéØ",
    color: "#f43f5e",
  },
};

/**
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤
 * –ö–∞–∂–¥—ã–π —Ç–µ–≥ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
 */
const TAG_WIDGET_ASSIGNMENTS: TagWidgetAssignment[] = [
  // Boolean —Ç–µ–≥–∏
  { tagId: "PC_IO_2.30", widgetType: WidgetType.LED_INDICATOR },
  { tagId: "PC_IO_2.12", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "pump1_bits1.27", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "pump2_bits1.27", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "PC_IO_2.31", widgetType: WidgetType.LED_INDICATOR },
  { tagId: "PC_IO_2.13", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "A[2].31", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "PC_IO_2.25", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "PC_IO_2.26", widgetType: WidgetType.LED_INDICATOR },

  // Boolean —Ç–µ–≥–∏ —Å —Ç–æ—á–∫–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è boolean –≤–∏–¥–∂–µ—Ç—ã —Ü–∏–∫–ª–∏—á–Ω–æ)
  { tagId: "DC_out_100ms[140].8", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "DC_out_100ms[140].10", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "DC_in_100ms[3].24", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "DC_in_100ms[3].25", widgetType: WidgetType.LED_INDICATOR },
  { tagId: "DC_out_100ms[140].9", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "DC_out_100ms[141].10", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "DC_in_100ms[3].16", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "DC_out_100ms[141].8", widgetType: WidgetType.LED_INDICATOR },
  { tagId: "DC_in_100ms[3].17", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "DC_out_100ms[141].9", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "DC_in_100ms[3].15", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "DC_out_100ms[140].13", widgetType: WidgetType.LED_INDICATOR },
  { tagId: "DC_in_100ms[3].22", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "DC_out_100ms[140].14", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "DC_in_100ms[3].21", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "DC_out_100ms[141].13", widgetType: WidgetType.LED_INDICATOR },
  { tagId: "DC_in_100ms[3].26", widgetType: WidgetType.SWITCH_TOGGLE },
  { tagId: "DC_in_100ms[3].18", widgetType: WidgetType.STATUS_LIGHT },
  { tagId: "DC_in_100ms[3].4", widgetType: WidgetType.ALARM_PANEL },
  { tagId: "DC_in_100ms[3].5", widgetType: WidgetType.LED_INDICATOR },

  // Number —Ç–µ–≥–∏ (int)
  { tagId: "Pump1_Wref_spm", widgetType: WidgetType.THERMOMETER },
  { tagId: "Pump1_Wfbk_spm", widgetType: WidgetType.GAUGE },
  { tagId: "DC_out_100ms[70]", widgetType: WidgetType.SPEEDOMETER },
  { tagId: "DC_out_100ms[72]", widgetType: WidgetType.LIQUID_FILL },
  { tagId: "P1_feed", widgetType: WidgetType.BAR_CHART },
  { tagId: "Pump2_Wfbk_spm", widgetType: WidgetType.AREA_CHART },
  { tagId: "Pump2_Wref_spm", widgetType: WidgetType.THERMOMETER },
  { tagId: "DC_out_100ms[74]", widgetType: WidgetType.GAUGE },
  { tagId: "DC_out_100ms[76]", widgetType: WidgetType.SPEEDOMETER },
  { tagId: "P2_feed", widgetType: WidgetType.LIQUID_FILL },
  { tagId: "DC_out_100ms[144]", widgetType: WidgetType.BAR_CHART },
  { tagId: "DC_out_100ms[146]", widgetType: WidgetType.AREA_CHART },
  { tagId: "DC_out_100ms[148]", widgetType: WidgetType.THERMOMETER },
  { tagId: "DC_out_100ms[164]", widgetType: WidgetType.GAUGE },
  { tagId: "DC_out_100ms[165]", widgetType: WidgetType.SPEEDOMETER },

  // DINT —Ç–µ–≥–∏ (–±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞)
  { tagId: "DC_in_100ms[84]", widgetType: WidgetType.DIGITAL_DISPLAY },
  { tagId: "DC_in_100ms[85]", widgetType: WidgetType.COUNTER },
  { tagId: "DC_in_100ms[86]", widgetType: WidgetType.HISTOGRAM },
  { tagId: "DC_in_100ms[87]", widgetType: WidgetType.RADAR_CHART },
  { tagId: "DC_in_100ms[88]", widgetType: WidgetType.DIGITAL_DISPLAY },

  // –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ç–µ–≥ —Å –∞–º–ø–µ—Ä–∞–º–∏
  { tagId: "Base_pumps_Ia_Amps", widgetType: WidgetType.GAUGE },
];

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
 */
export const getWidgetConfig = (type: WidgetType): WidgetConfig => {
  return WIDGET_CONFIGS[type];
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
 */
export const getAllWidgetConfigs = (): WidgetConfig[] => {
  return Object.values(WIDGET_CONFIGS);
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
 */
export const getWidgetsByDataType = (
  dataType: "boolean" | "number"
): WidgetConfig[] => {
  return Object.values(WIDGET_CONFIGS).filter((config) =>
    config.dataTypes.includes(dataType)
  );
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ç–µ–≥–∞
 */
export const getWidgetForTag = (tagId: string): WidgetType | null => {
  const assignment = TAG_WIDGET_ASSIGNMENTS.find(
    (assignment) => assignment.tagId === tagId
  );
  return assignment?.widgetType || null;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∂–µ—Ç–µ –¥–ª—è —Ç–µ–≥–∞
 */
export const getTagWidgetInfo = (tag: Tag) => {
  const widgetType = getWidgetForTag(tag.id);
  if (!widgetType) {
    return null;
  }

  const config = getWidgetConfig(widgetType);
  return {
    widgetType,
    config,
    tag,
    isCompatible: config.dataTypes.includes(tag.type as "boolean" | "number"),
  };
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
 */
export const getAllTagWidgetAssignments = (): TagWidgetAssignment[] => {
  return TAG_WIDGET_ASSIGNMENTS;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤–∏–¥–∂–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
 */
export const getWidgetColor = (type: WidgetType): string => {
  return WIDGET_CONFIGS[type]?.color || "#8884d8";
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –≤–∏–¥–∂–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
 */
export const getWidgetIcon = (type: WidgetType): string => {
  return WIDGET_CONFIGS[type]?.icon || "üìä";
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∏–¥–∂–µ—Ç–∞ —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö
 */
export const isWidgetCompatible = (
  widgetType: WidgetType,
  dataType: string
): boolean => {
  const config = getWidgetConfig(widgetType);
  return config.dataTypes.includes(dataType as "boolean" | "number");
};
